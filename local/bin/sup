#!/bin/bash
# View/edit standup notes

pr_usage()
{
	echo "usage: sup PCODE # edit"
	echo "       sup edit PCODE"
	echo "       sup show PCODE d"
	echo "       sup show PCODE tom"
	echo "       sup format PCODE"
	echo "       sup new PCODE_NEW"
}

pr_err()
{
	>&2 echo "Error: $*"
}

check_env_or_die()
{
	if ! [ -d "$SUP_DIR" ]; then
		pr_err "Could not find SUP_DIR"
		exit 1
	fi
	if ! [ -d "$SUP_LOG_DIR" ]; then
		pr_err "Could not find SUP_LOG_DIR"
		exit 1
	fi

}

pr_sup_file_path()
{
	declare -r pcode="$1"
	declare -r sup_file="$SUP_DIR/${pcode}.md"

	echo "$sup_file"
}

# Edit standup notes for project group
edit()
{
	declare -r pcode="$1"

	"$EDITOR" "$(pr_sup_file_path "$pcode")"
}

# Print the standup file and append the next engineers name.
show()
{
	declare -r pcode="$1" name="$2"
	declare sup_file_path

	sup_file_path="$(pr_sup_file_path "$pcode")"

	if [ -z "$name" ]; then
		pr_usage
		return 1
	fi

	cat "$sup_file_path"
	grep -i "# $name" "$sup_file_path"
}

# Scrape standup notes from this groups IRC log
format()
{
	declare -r pcode="$1"
	declare -r weechatlog="$SUP_LOG_DIR/irc.codethink.#${pcode}.weechatlog"
	declare tmplog

	if [ -z "$pcode" ]; then
		pr_usage
		return 1
	fi
	if [ ! -f "$weechatlog" ]; then
		pr_err "$weechatlog does not exist"
		return 1
	fi

	tmplog=$(mktemp "/tmp/sup-format-${pcode}-XXXXXX.txt")

	# Reverse the log and print until we find standup master (me)
	tac "$weechatlog" |
		awk 'BEGIN { relevant=1 };
			relevant { print $0 };
			/## Thomas Preston/ { relevant=0 }' |
	# Reverse again and format the notes
		tac |
		awk -F"\t" 'BEGIN { discussion=0 };

			# Add a one-line gap before engnieer headers
			# note: !discussion actually prints engineer
			$3~/^## / { print "" };

			# Surround Discussion header with one-line gaps
			$3~/^# Discussion/ {
				discussion=1;
				print "";
				print $3;
				print ""
			};

			# Print notes without timestamps or usernames
			!discussion { print $3 };

			# Print discussion without timestamps, with usernames
			discussion { print "    ",$2,$3 }' |
		tee "$tmplog"

	# print the $EDITOR command to stderr for convenience
	>&2 echo "$EDITOR $tmplog"
}

# Create new standup notes for project group
new()
{
	declare -r pcode="$1"
	declare sup_file_path

	sup_file_path="$(pr_sup_file_path "$pcode")"

	cat > "$sup_file_path" <<EOF
# Standup Notes $pcode
## Thomas Preston (tpreston)
# Discussion

## Thomas Preston (tpreston)
* Done:
* Doing:
* Next:
* Backlog:
EOF
	edit "$pcode"
}

if [ $# -lt 1 ]; then
	pr_err "Need at least 1 arg"
	pr_usage
	exit 1
fi
check_env_or_die

case "$1" in
"edit")
	edit "$2"
	;;
"format")
	format "$2"
	;;
"new")
	new "$2"
	;;
"show")
	show "$2" "$3"
	;;
*)
	edit "$1"
	;;
esac
